// Generated by gencpp from file lidar_msgs/SocketBox.msg
// DO NOT EDIT!


#ifndef LIDAR_MSGS_MESSAGE_SOCKETBOX_H
#define LIDAR_MSGS_MESSAGE_SOCKETBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lidar_msgs/BoxInfo.h>

namespace lidar_msgs
{
template <class ContainerAllocator>
struct SocketBox_
{
  typedef SocketBox_<ContainerAllocator> Type;

  SocketBox_()
    : num_of_box(0)
    , box_info()  {
    }
  SocketBox_(const ContainerAllocator& _alloc)
    : num_of_box(0)
    , box_info(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_of_box_type;
  _num_of_box_type num_of_box;

   typedef std::vector< ::lidar_msgs::BoxInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lidar_msgs::BoxInfo_<ContainerAllocator> >> _box_info_type;
  _box_info_type box_info;





  typedef boost::shared_ptr< ::lidar_msgs::SocketBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_msgs::SocketBox_<ContainerAllocator> const> ConstPtr;

}; // struct SocketBox_

typedef ::lidar_msgs::SocketBox_<std::allocator<void> > SocketBox;

typedef boost::shared_ptr< ::lidar_msgs::SocketBox > SocketBoxPtr;
typedef boost::shared_ptr< ::lidar_msgs::SocketBox const> SocketBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_msgs::SocketBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_msgs::SocketBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_msgs::SocketBox_<ContainerAllocator1> & lhs, const ::lidar_msgs::SocketBox_<ContainerAllocator2> & rhs)
{
  return lhs.num_of_box == rhs.num_of_box &&
    lhs.box_info == rhs.box_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_msgs::SocketBox_<ContainerAllocator1> & lhs, const ::lidar_msgs::SocketBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar_msgs::SocketBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_msgs::SocketBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_msgs::SocketBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_msgs::SocketBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_msgs::SocketBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_msgs::SocketBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_msgs::SocketBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e7c1fed7bbc79bff735bfacc0aaebc3";
  }

  static const char* value(const ::lidar_msgs::SocketBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e7c1fed7bbc79bfULL;
  static const uint64_t static_value2 = 0xf735bfacc0aaebc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_msgs::SocketBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_msgs/SocketBox";
  }

  static const char* value(const ::lidar_msgs::SocketBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_msgs::SocketBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num_of_box\n"
"BoxInfo[] box_info\n"
"\n"
"================================================================================\n"
"MSG: lidar_msgs/BoxInfo\n"
"box box\n"
"\n"
"================================================================================\n"
"MSG: lidar_msgs/box\n"
"float32 x_min\n"
"float32 y_min\n"
"float32 z_min\n"
"float32 x_max\n"
"float32 y_max\n"
"float32 z_max\n"
;
  }

  static const char* value(const ::lidar_msgs::SocketBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_msgs::SocketBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_of_box);
      stream.next(m.box_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SocketBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_msgs::SocketBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_msgs::SocketBox_<ContainerAllocator>& v)
  {
    s << indent << "num_of_box: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_of_box);
    s << indent << "box_info[]" << std::endl;
    for (size_t i = 0; i < v.box_info.size(); ++i)
    {
      s << indent << "  box_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lidar_msgs::BoxInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.box_info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_MSGS_MESSAGE_SOCKETBOX_H
